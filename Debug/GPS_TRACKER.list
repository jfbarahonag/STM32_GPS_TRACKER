
GPS_TRACKER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  08004a94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004a94  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa00  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ff5  00000000  00000000  0002fa3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00031a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026d18  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b545  00000000  00000000  0005a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1e42  00000000  00000000  000659ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001577ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  0015786c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049e8 	.word	0x080049e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080049e8 	.word	0x080049e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <but_fsm_init>:
#define BUT_GPIO_Port 	GPIOC

#define LED_Pin 		GPIO_PIN_5
#define LED_GPIO_Port 	GPIOA
/* ------------------------------------------ */
void but_fsm_init ( but_fsm_t *fsm ) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	fsm->time_being_pressed = 0;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	801a      	strh	r2, [r3, #0]
	fsm->countdown = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	805a      	strh	r2, [r3, #2]
	fsm->event = EVT_BUT_NO_EVT;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	715a      	strb	r2, [r3, #5]
	fsm->state = STATE_BUT_WAITING;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	711a      	strb	r2, [r3, #4]
	fsm->new_event = false;
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	7993      	ldrb	r3, [r2, #6]
 80004ec:	f36f 0300 	bfc	r3, #0, #1
 80004f0:	7193      	strb	r3, [r2, #6]
	fsm->start_countdown = false;
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7993      	ldrb	r3, [r2, #6]
 80004f6:	f36f 0341 	bfc	r3, #1, #1
 80004fa:	7193      	strb	r3, [r2, #6]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <but_pressed>:

bool_t but_pressed ( void ) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin); //Button in STM32L476RG is connected pull up
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <but_pressed+0x20>)
 8000512:	f001 f93d 	bl	8001790 <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	bf0c      	ite	eq
 800051c:	2301      	moveq	r3, #1
 800051e:	2300      	movne	r3, #0
 8000520:	b2db      	uxtb	r3, r3
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	48000800 	.word	0x48000800

0800052c <but_fsm_run>:

void but_fsm_run ( but_fsm_t *fsm ) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	if (fsm->new_event == true) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	799b      	ldrb	r3, [r3, #6]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d063      	beq.n	800060a <but_fsm_run+0xde>
		fsm->new_event = false;
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7993      	ldrb	r3, [r2, #6]
 8000546:	f36f 0300 	bfc	r3, #0, #1
 800054a:	7193      	strb	r3, [r2, #6]

		switch (fsm->state) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	2b03      	cmp	r3, #3
 8000552:	d859      	bhi.n	8000608 <but_fsm_run+0xdc>
 8000554:	a201      	add	r2, pc, #4	; (adr r2, 800055c <but_fsm_run+0x30>)
 8000556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055a:	bf00      	nop
 800055c:	0800056d 	.word	0x0800056d
 8000560:	08000587 	.word	0x08000587
 8000564:	080005ab 	.word	0x080005ab
 8000568:	080005f9 	.word	0x080005f9

		case STATE_BUT_WAITING:
			if( fsm->event == EVT_BUT_PRESSED ) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d14c      	bne.n	800060e <but_fsm_run+0xe2>
				fsm->start_countdown = true;
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7993      	ldrb	r3, [r2, #6]
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	7193      	strb	r3, [r2, #6]
				fsm->state = STATE_BUT_DETECTED;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	711a      	strb	r2, [r3, #4]
			}
			break;
 8000584:	e043      	b.n	800060e <but_fsm_run+0xe2>

		case STATE_BUT_DETECTED:
			if( fsm->event == EVT_BUT_TIMEOUT ) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d141      	bne.n	8000612 <but_fsm_run+0xe6>
				if (but_pressed()) {
 800058e:	f7ff ffbb 	bl	8000508 <but_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d03c      	beq.n	8000612 <but_fsm_run+0xe6>
					fsm->start_countdown = true;
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7993      	ldrb	r3, [r2, #6]
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	7193      	strb	r3, [r2, #6]
					fsm->state = STATE_BUT_WAIT_RELEASE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2202      	movs	r2, #2
 80005a6:	711a      	strb	r2, [r3, #4]
				}
			}
			break;
 80005a8:	e033      	b.n	8000612 <but_fsm_run+0xe6>

		case STATE_BUT_WAIT_RELEASE:
			if ( fsm->event == EVT_BUT_TIMEOUT ) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d131      	bne.n	8000616 <but_fsm_run+0xea>
				if (!but_pressed()) {
 80005b2:	f7ff ffa9 	bl	8000508 <but_pressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f083 0301 	eor.w	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00b      	beq.n	80005da <but_fsm_run+0xae>
					fsm->state = STATE_BUT_UPDATE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	711a      	strb	r2, [r3, #4]
					fsm->start_countdown = true;
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7993      	ldrb	r3, [r2, #6]
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	7193      	strb	r3, [r2, #6]
					fsm->time_being_pressed = 0; /* Reset count when is released */
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	801a      	strh	r2, [r3, #0]
					fsm->start_countdown = true;
					fsm->time_being_pressed++; /* count seconds while it is being pressed (NON BLOCKING MODE)
												* and update each TICK value [msecs] */
				}
			}
			break;
 80005d8:	e01d      	b.n	8000616 <but_fsm_run+0xea>
					fsm->state = STATE_BUT_WAIT_RELEASE;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2202      	movs	r2, #2
 80005de:	711a      	strb	r2, [r3, #4]
					fsm->start_countdown = true;
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7993      	ldrb	r3, [r2, #6]
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	7193      	strb	r3, [r2, #6]
					fsm->time_being_pressed++; /* count seconds while it is being pressed (NON BLOCKING MODE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	801a      	strh	r2, [r3, #0]
			break;
 80005f6:	e00e      	b.n	8000616 <but_fsm_run+0xea>

		case STATE_BUT_UPDATE:
			if ( fsm->event == EVT_BUT_TIMEOUT ) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d10c      	bne.n	800061a <but_fsm_run+0xee>
				fsm->state = STATE_BUT_WAITING;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	711a      	strb	r2, [r3, #4]
			}
			break;
 8000606:	e008      	b.n	800061a <but_fsm_run+0xee>

		default: /* ERROR */

			while(1);
 8000608:	e7fe      	b.n	8000608 <but_fsm_run+0xdc>

		}

	}
 800060a:	bf00      	nop
 800060c:	e006      	b.n	800061c <but_fsm_run+0xf0>
			break;
 800060e:	bf00      	nop
 8000610:	e004      	b.n	800061c <but_fsm_run+0xf0>
			break;
 8000612:	bf00      	nop
 8000614:	e002      	b.n	800061c <but_fsm_run+0xf0>
			break;
 8000616:	bf00      	nop
 8000618:	e000      	b.n	800061c <but_fsm_run+0xf0>
			break;
 800061a:	bf00      	nop
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
	if ( button.state == STATE_BUT_WAITING ) {
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_GPIO_EXTI_Callback+0x30>)
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d107      	bne.n	8000646 <HAL_GPIO_EXTI_Callback+0x22>
		button.event = EVT_BUT_PRESSED;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <HAL_GPIO_EXTI_Callback+0x30>)
 8000638:	2201      	movs	r2, #1
 800063a:	715a      	strb	r2, [r3, #5]
		button.new_event = true;
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <HAL_GPIO_EXTI_Callback+0x30>)
 800063e:	7993      	ldrb	r3, [r2, #6]
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	7193      	strb	r3, [r2, #6]
	}
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028

08000658 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_UART_RxCpltCallback+0x48>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d116      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x40>
		if (tracker.state == STATE_TRACKER_WAITING_GPS_RESPONSE) {
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_UART_RxCpltCallback+0x4c>)
 800066c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8000670:	2b03      	cmp	r3, #3
 8000672:	d111      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x40>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	2120      	movs	r1, #32
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f001 f8a0 	bl	80017c0 <HAL_GPIO_WritePin>
			tracker.flag.start_to_request_nmea_data = false;
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <HAL_UART_RxCpltCallback+0x4c>)
 8000682:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 8000686:	f36f 1345 	bfc	r3, #5, #1
 800068a:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
			HAL_UART_Transmit_IT(&huart2, tracker.buff.rx, SIZE);
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	4904      	ldr	r1, [pc, #16]	; (80006a4 <HAL_UART_RxCpltCallback+0x4c>)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_UART_RxCpltCallback+0x50>)
 8000694:	f003 f8d4 	bl	8003840 <HAL_UART_Transmit_IT>
		}
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40013800 	.word	0x40013800
 80006a4:	200001b0 	.word	0x200001b0
 80006a8:	20000130 	.word	0x20000130

080006ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2) { /* ONLY FOR BUTTON */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006bc:	d120      	bne.n	8000700 <HAL_TIM_PeriodElapsedCallback+0x54>
		if (button.start_countdown == true) {
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d005      	beq.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x2c>
			button.countdown++;
 80006cc:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006ce:	885b      	ldrh	r3, [r3, #2]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006d6:	805a      	strh	r2, [r3, #2]
		}

		/* 10 mSeg elapsed*/
		if (button.countdown >= TICK) {
 80006d8:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006da:	885b      	ldrh	r3, [r3, #2]
 80006dc:	2b09      	cmp	r3, #9
 80006de:	d90f      	bls.n	8000700 <HAL_TIM_PeriodElapsedCallback+0x54>
			button.countdown = 0;
 80006e0:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	805a      	strh	r2, [r3, #2]
			button.start_countdown = false;
 80006e6:	4a40      	ldr	r2, [pc, #256]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006e8:	7993      	ldrb	r3, [r2, #6]
 80006ea:	f36f 0341 	bfc	r3, #1, #1
 80006ee:	7193      	strb	r3, [r2, #6]
			button.new_event = true;
 80006f0:	4a3d      	ldr	r2, [pc, #244]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006f2:	7993      	ldrb	r3, [r2, #6]
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	7193      	strb	r3, [r2, #6]
			button.event = EVT_BUT_TIMEOUT;
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	715a      	strb	r2, [r3, #5]
		}
	}

	if (htim->Instance == TIM3) { /* ONLY FOR TRACKER */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a39      	ldr	r2, [pc, #228]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d16a      	bne.n	80007e0 <HAL_TIM_PeriodElapsedCallback+0x134>

		if ( tracker.flag.start_to_request_nmea_data == true ) {
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800070c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8000710:	f003 0320 	and.w	r3, r3, #32
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d008      	beq.n	800072c <HAL_TIM_PeriodElapsedCallback+0x80>
			tracker.counter_request_nmea_data++;
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800071c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000720:	3301      	adds	r3, #1
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000726:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
 800072a:	e003      	b.n	8000734 <HAL_TIM_PeriodElapsedCallback+0x88>
		} else {
			tracker.counter_request_nmea_data = 0;
 800072c:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800072e:	2200      	movs	r2, #0
 8000730:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
		}

		if ( tracker.counter_request_nmea_data >= 1000 ) {
 8000734:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000736:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 800073a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800073e:	d313      	bcc.n	8000768 <HAL_TIM_PeriodElapsedCallback+0xbc>
			tracker.counter_request_nmea_data = 0;
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000742:	2200      	movs	r2, #0
 8000744:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)"AT+QGNSSRD=\"NMEA/RMC\"\r", strlen("AT+QGNSSRD=\"NMEA/RMC\"\r"));
 8000748:	2216      	movs	r2, #22
 800074a:	492a      	ldr	r1, [pc, #168]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800074c:	482a      	ldr	r0, [pc, #168]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800074e:	f003 f877 	bl	8003840 <HAL_UART_Transmit_IT>
			tracker.event = EVT_TRACKER_GPS_REQUEST_SENT;
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000754:	2203      	movs	r2, #3
 8000756:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			tracker.flag.new_event = true;
 800075a:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800075c:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
		}

		if ( tracker.state == STATE_TRACKER_IDLE ) {
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800076a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800076e:	2b00      	cmp	r3, #0
 8000770:	d110      	bne.n	8000794 <HAL_TIM_PeriodElapsedCallback+0xe8>
			if ( *tracker.time >= TIME_NEEDED_TO_ALARM ) { //two seconds
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000774:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2bc7      	cmp	r3, #199	; 0xc7
 800077c:	d90a      	bls.n	8000794 <HAL_TIM_PeriodElapsedCallback+0xe8>
				tracker.event = EVT_TRACKER_ALERT_ON;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000780:	2201      	movs	r2, #1
 8000782:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				tracker.flag.new_event = true;
 8000786:	4a1a      	ldr	r2, [pc, #104]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000788:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
			}

		}

		if ( tracker.flag.start_counter_request == true ) {
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000796:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d007      	beq.n	80007b4 <HAL_TIM_PeriodElapsedCallback+0x108>
			tracker.counter_request++;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 80007b2:	e003      	b.n	80007bc <HAL_TIM_PeriodElapsedCallback+0x110>
		} else {
			tracker.counter_request = 0;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}

		if ( tracker.counter_request >= TIME_TO_START_SYSTEM ) {
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80007c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d90a      	bls.n	80007e0 <HAL_TIM_PeriodElapsedCallback+0x134>
			tracker.event = EVT_TRACKER_TIMEOUT_REQUEST_GPS;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			tracker.flag.new_event = true;
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007d4:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
		}

	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000028 	.word	0x20000028
 80007ec:	40000400 	.word	0x40000400
 80007f0:	200001b0 	.word	0x200001b0
 80007f4:	08004a00 	.word	0x08004a00
 80007f8:	20000070 	.word	0x20000070

080007fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000800:	f000 fc5b 	bl	80010ba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000804:	f000 f826 	bl	8000854 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000808:	f000 f988 	bl	8000b1c <MX_GPIO_Init>
	MX_TIM2_Init();
 800080c:	f000 f88a 	bl	8000924 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000810:	f000 f8d6 	bl	80009c0 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000814:	f000 f922 	bl	8000a5c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000818:	f000 f950 	bl	8000abc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <main+0x48>)
 800081e:	f002 fb29 	bl	8002e74 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <main+0x4c>)
 8000824:	f002 fb26 	bl	8002e74 <HAL_TIM_Base_Start_IT>
	but_fsm_init(&button);
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <main+0x50>)
 800082a:	f7ff fe4d 	bl	80004c8 <but_fsm_init>
	tracker_fsm_init(&tracker, &button);
 800082e:	4907      	ldr	r1, [pc, #28]	; (800084c <main+0x50>)
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <main+0x54>)
 8000832:	f000 f9cb 	bl	8000bcc <tracker_fsm_init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		but_fsm_run(&button);
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <main+0x50>)
 8000838:	f7ff fe78 	bl	800052c <but_fsm_run>
		tracker_fsm_run(&tracker);
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <main+0x54>)
 800083e:	f000 f9f7 	bl	8000c30 <tracker_fsm_run>
		but_fsm_run(&button);
 8000842:	e7f8      	b.n	8000836 <main+0x3a>
 8000844:	200000f0 	.word	0x200000f0
 8000848:	20000030 	.word	0x20000030
 800084c:	20000028 	.word	0x20000028
 8000850:	200001b0 	.word	0x200001b0

08000854 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0b8      	sub	sp, #224	; 0xe0
 8000858:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800085e:	2244      	movs	r2, #68	; 0x44
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f004 f8b8 	bl	80049d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2288      	movs	r2, #136	; 0x88
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f004 f8aa 	bl	80049d8 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000884:	2310      	movs	r3, #16
 8000886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088a:	2301      	movs	r3, #1
 800088c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f81e 	bl	80018e8 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x62>
	{
		Error_Handler();
 80008b2:	f000 fa55 	bl	8000d60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fbea 	bl	80020b4 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x96>
	{
		Error_Handler();
 80008e6:	f000 fa3b 	bl	8000d60 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80008ea:	2303      	movs	r3, #3
 80008ec:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008ee:	2300      	movs	r3, #0
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fddf 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000904:	f000 fa2c 	bl	8000d60 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000908:	f44f 7000 	mov.w	r0, #512	; 0x200
 800090c:	f000 ff96 	bl	800183c <HAL_PWREx_ControlVoltageScaling>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000916:	f000 fa23 	bl	8000d60 <Error_Handler>
	}
}
 800091a:	bf00      	nop
 800091c:	37e0      	adds	r7, #224	; 0xe0
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000942:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_TIM2_Init+0x98>)
 8000944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000948:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 31;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_TIM2_Init+0x98>)
 800094c:	221f      	movs	r2, #31
 800094e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_TIM2_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_TIM2_Init+0x98>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_TIM2_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_TIM2_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_TIM2_Init+0x98>)
 800096c:	f002 fa56 	bl	8002e1c <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8000976:	f000 f9f3 	bl	8000d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_TIM2_Init+0x98>)
 8000988:	f002 fbbd 	bl	8003106 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8000992:	f000 f9e5 	bl	8000d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_TIM2_Init+0x98>)
 80009a4:	f002 fdc4 	bl	8003530 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80009ae:	f000 f9d7 	bl	8000d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000f0 	.word	0x200000f0

080009c0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <MX_TIM3_Init+0x98>)
 80009e2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 31;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009e6:	221f      	movs	r2, #31
 80009e8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM3_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM3_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM3_Init+0x94>)
 8000a06:	f002 fa09 	bl	8002e1c <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000a10:	f000 f9a6 	bl	8000d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM3_Init+0x94>)
 8000a22:	f002 fb70 	bl	8003106 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000a2c:	f000 f998 	bl	8000d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM3_Init+0x94>)
 8000a3e:	f002 fd77 	bl	8003530 <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000a48:	f000 f98a 	bl	8000d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000030 	.word	0x20000030
 8000a58:	40000400 	.word	0x40000400

08000a5c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_USART1_UART_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART1_UART_Init+0x58>)
 8000aa0:	f002 fdec 	bl	800367c <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000aaa:	f000 f959 	bl	8000d60 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000070 	.word	0x20000070
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <MX_USART2_UART_Init+0x5c>)
 8000ac4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000b00:	f002 fdbc 	bl	800367c <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000b0a:	f000 f929 	bl	8000d60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000130 	.word	0x20000130
 8000b18:	40004400 	.word	0x40004400

08000b1c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2160      	movs	r1, #96	; 0x60
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fe29 	bl	80017c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_GPIO_Init+0xa8>)
 8000b76:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <MX_GPIO_Init+0xac>)
 8000b84:	f000 fc5c 	bl	8001440 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin BUZZ_Pin */
	GPIO_InitStruct.Pin = LD2_Pin|BUZZ_Pin;
 8000b88:	2360      	movs	r3, #96	; 0x60
 8000b8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fc4d 	bl	8001440 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2028      	movs	r0, #40	; 0x28
 8000bac:	f000 fbd1 	bl	8001352 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb0:	2028      	movs	r0, #40	; 0x28
 8000bb2:	f000 fbea 	bl	800138a <HAL_NVIC_EnableIRQ>

}
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	10210000 	.word	0x10210000
 8000bc8:	48000800 	.word	0x48000800

08000bcc <tracker_fsm_init>:

/* USER CODE BEGIN 4 */
void tracker_fsm_init ( tracker_fsm_t *fsm, but_fsm_t *but ) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	fsm->buff.rx[SIZE-1] = '\0';
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	fsm->buff.tx[SIZE-1] = '\0';
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	fsm->state = STATE_TRACKER_IDLE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	fsm->event = EVT_TRACKER_NO_EVT;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	fsm->time = &but->time_being_pressed;
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	fsm->counter_request_nmea_data = 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	fsm->counter_fail = 0;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	fsm->counter_request = 0;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fsm->flag.all_flags = 0x00;
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 8000c1c:	f36f 0305 	bfc	r3, #0, #6
 8000c20:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <tracker_fsm_run>:

void tracker_fsm_run ( tracker_fsm_t *fsm ) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if( fsm->flag.new_event == true ) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d076      	beq.n	8000d36 <tracker_fsm_run+0x106>
		fsm->flag.new_event = false;
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 8000c4e:	f36f 0300 	bfc	r3, #0, #1
 8000c52:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e

		switch (fsm->state) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d869      	bhi.n	8000d34 <tracker_fsm_run+0x104>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <tracker_fsm_run+0x38>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c81 	.word	0x08000c81
 8000c6c:	08000cd1 	.word	0x08000cd1
 8000c70:	08000d17 	.word	0x08000d17
 8000c74:	08000d2b 	.word	0x08000d2b
 8000c78:	08000d3b 	.word	0x08000d3b
 8000c7c:	08000d3b 	.word	0x08000d3b

		case STATE_TRACKER_IDLE:
			if (fsm->event == EVT_TRACKER_ALERT_ON) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d159      	bne.n	8000d3e <tracker_fsm_run+0x10e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f000 fd95 	bl	80017c0 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t *)"ATE0\r", strlen("ATE0\r"), 100); /* turn off echo mode */
 8000c96:	2364      	movs	r3, #100	; 0x64
 8000c98:	2205      	movs	r2, #5
 8000c9a:	492d      	ldr	r1, [pc, #180]	; (8000d50 <tracker_fsm_run+0x120>)
 8000c9c:	482d      	ldr	r0, [pc, #180]	; (8000d54 <tracker_fsm_run+0x124>)
 8000c9e:	f002 fd3b 	bl	8003718 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t *)"AT+QGNSSC=1\r", strlen("AT+QGNSSC=1\r"), 100); /* turn on GNSS module */
 8000ca2:	2364      	movs	r3, #100	; 0x64
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	492c      	ldr	r1, [pc, #176]	; (8000d58 <tracker_fsm_run+0x128>)
 8000ca8:	482a      	ldr	r0, [pc, #168]	; (8000d54 <tracker_fsm_run+0x124>)
 8000caa:	f002 fd35 	bl	8003718 <HAL_UART_Transmit>
				fsm->flag.start_counter_request = true;
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
				fsm->state = STATE_TRACKER_WAIT_FOR_REQUEST_GPS;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				HAL_UART_Receive_IT(&huart1, tracker.buff.rx, 70);
 8000cc4:	2246      	movs	r2, #70	; 0x46
 8000cc6:	4925      	ldr	r1, [pc, #148]	; (8000d5c <tracker_fsm_run+0x12c>)
 8000cc8:	4822      	ldr	r0, [pc, #136]	; (8000d54 <tracker_fsm_run+0x124>)
 8000cca:	f002 fe15 	bl	80038f8 <HAL_UART_Receive_IT>
			}
			break;
 8000cce:	e036      	b.n	8000d3e <tracker_fsm_run+0x10e>

		case STATE_TRACKER_WAIT_FOR_REQUEST_GPS:

			if (fsm->event == EVT_TRACKER_TIMEOUT_REQUEST_GPS) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d133      	bne.n	8000d42 <tracker_fsm_run+0x112>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2120      	movs	r1, #32
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f000 fd6d 	bl	80017c0 <HAL_GPIO_WritePin>
				fsm->flag.start_counter_request = false;
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 8000cec:	f36f 03c3 	bfc	r3, #3, #1
 8000cf0:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
				fsm->flag.start_to_request_nmea_data = true;
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
				HAL_UART_Receive_IT(&huart1, tracker.buff.rx, 70);
 8000d02:	2246      	movs	r2, #70	; 0x46
 8000d04:	4915      	ldr	r1, [pc, #84]	; (8000d5c <tracker_fsm_run+0x12c>)
 8000d06:	4813      	ldr	r0, [pc, #76]	; (8000d54 <tracker_fsm_run+0x124>)
 8000d08:	f002 fdf6 	bl	80038f8 <HAL_UART_Receive_IT>

				fsm->state = STATE_TRACKER_SEND_REQUEST_GPS;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			}
			break;
 8000d14:	e015      	b.n	8000d42 <tracker_fsm_run+0x112>

		case STATE_TRACKER_SEND_REQUEST_GPS:

			if (fsm->event == EVT_TRACKER_GPS_REQUEST_SENT) { /* transition state */
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d112      	bne.n	8000d46 <tracker_fsm_run+0x116>

				fsm->state = STATE_TRACKER_WAITING_GPS_RESPONSE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2203      	movs	r2, #3
 8000d24:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

			}
			break;
 8000d28:	e00d      	b.n	8000d46 <tracker_fsm_run+0x116>

		case STATE_TRACKER_WAITING_GPS_RESPONSE:

			if (fsm->event == EVT_TRACKER_GPS_RESPONSE_RECEIVED) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8000d30:	2b05      	cmp	r3, #5
			}
			else if (fsm->event == EVT_TRACKER_GPS_REQUEST_SENT) { /* NOT RECEIVED */

			}

			break;
 8000d32:	e009      	b.n	8000d48 <tracker_fsm_run+0x118>

			break;

		default: /* ERROR */

			while(1);
 8000d34:	e7fe      	b.n	8000d34 <tracker_fsm_run+0x104>
			break;
		}
	}
 8000d36:	bf00      	nop
 8000d38:	e006      	b.n	8000d48 <tracker_fsm_run+0x118>
			break;
 8000d3a:	bf00      	nop
 8000d3c:	e004      	b.n	8000d48 <tracker_fsm_run+0x118>
			break;
 8000d3e:	bf00      	nop
 8000d40:	e002      	b.n	8000d48 <tracker_fsm_run+0x118>
			break;
 8000d42:	bf00      	nop
 8000d44:	e000      	b.n	8000d48 <tracker_fsm_run+0x118>
			break;
 8000d46:	bf00      	nop
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	08004a18 	.word	0x08004a18
 8000d54:	20000070 	.word	0x20000070
 8000d58:	08004a20 	.word	0x08004a20
 8000d5c:	200001b0 	.word	0x200001b0

08000d60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc8:	d114      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_TIM_Base_MspInit+0x78>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_TIM_Base_MspInit+0x78>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_TIM_Base_MspInit+0x78>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201c      	movs	r0, #28
 8000de8:	f000 fab3 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dec:	201c      	movs	r0, #28
 8000dee:	f000 facc 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000df2:	e018      	b.n	8000e26 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_TIM_Base_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d113      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_TIM_Base_MspInit+0x78>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_TIM_Base_MspInit+0x78>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_TIM_Base_MspInit+0x78>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	201d      	movs	r0, #29
 8000e1c:	f000 fa99 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e20:	201d      	movs	r0, #29
 8000e22:	f000 fab2 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40000400 	.word	0x40000400

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_UART_MspInit+0xfc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d132      	bne.n	8000ec0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6613      	str	r3, [r2, #96]	; 0x60
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = U1_TX_Pin|U1_RX_Pin;
 8000e8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 fac9 	bl	8001440 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2025      	movs	r0, #37	; 0x25
 8000eb4:	f000 fa4d 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eb8:	2025      	movs	r0, #37	; 0x25
 8000eba:	f000 fa66 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ebe:	e035      	b.n	8000f2c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_UART_MspInit+0x104>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d130      	bne.n	8000f2c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_UART_MspInit+0x100>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U2_TX_Pin|U2_RX_Pin;
 8000efa:	230c      	movs	r3, #12
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f000 fa92 	bl	8001440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2026      	movs	r0, #38	; 0x26
 8000f22:	f000 fa16 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f26:	2026      	movs	r0, #38	; 0x26
 8000f28:	f000 fa2f 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40004400 	.word	0x40004400

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8e4 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM2_IRQHandler+0x10>)
 8000fa2:	f001 ff91 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000f0 	.word	0x200000f0

08000fb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM3_IRQHandler+0x10>)
 8000fb6:	f001 ff87 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000030 	.word	0x20000030

08000fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART1_IRQHandler+0x10>)
 8000fca:	f002 fd37 	bl	8003a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000070 	.word	0x20000070

08000fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <USART2_IRQHandler+0x10>)
 8000fde:	f002 fd2d 	bl	8003a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000130 	.word	0x20000130

08000fec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ff0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ff4:	f000 fbfc 	bl	80017f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <SystemInit+0x64>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <SystemInit+0x64>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <SystemInit+0x68>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <SystemInit+0x68>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <SystemInit+0x68>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <SystemInit+0x68>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <SystemInit+0x68>)
 8001028:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800102c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001030:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <SystemInit+0x68>)
 8001034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001038:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <SystemInit+0x68>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <SystemInit+0x68>)
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <SystemInit+0x68>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SystemInit+0x64>)
 800104e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001052:	609a      	str	r2, [r3, #8]
#endif
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	40021000 	.word	0x40021000

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800106c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800107e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
	ldr	r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001086:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001088:	f842 3b04 	str.w	r3, [r2], #4

0800108c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <LoopForever+0x16>)
	cmp	r2, r3
 800108e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001092:	f7ff ffb3 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 fc7b 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff fbaf 	bl	80007fc <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80010a4:	08004a88 	.word	0x08004a88
	ldr	r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010ac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010b0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010b4:	200002c4 	.word	0x200002c4

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>

080010ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f939 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f80e 	bl	80010ec <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff fe48 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_InitTick+0x68>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d022      	beq.n	8001146 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_InitTick+0x6c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_InitTick+0x68>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800110c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001110:	fbb2 f3f3 	udiv	r3, r2, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f946 	bl	80013a6 <HAL_SYSTICK_Config>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d809      	bhi.n	800113a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001126:	2200      	movs	r2, #0
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	f04f 30ff 	mov.w	r0, #4294967295
 800112e:	f000 f910 	bl	8001352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_InitTick+0x70>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e007      	b.n	800114a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e004      	b.n	800114a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e001      	b.n	800114a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000008 	.word	0x20000008
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4413      	add	r3, r2
 800116e:	4a03      	ldr	r2, [pc, #12]	; (800117c <HAL_IncTick+0x1c>)
 8001170:	6013      	str	r3, [r2, #0]
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	200002c0 	.word	0x200002c0
 8001180:	20000008 	.word	0x20000008

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200002c0 	.word	0x200002c0

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff3e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff31 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d005      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2204      	movs	r2, #4
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e029      	b.n	8001436 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 020e 	bic.w	r2, r2, #14
 80013f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0201 	bic.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 021c 	and.w	r2, r3, #28
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	2101      	movs	r1, #1
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
    }
  }
  return status;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e17f      	b.n	8001750 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8171 	beq.w	800174a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d00b      	beq.n	8001488 <HAL_GPIO_Init+0x48>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147c:	2b11      	cmp	r3, #17
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b12      	cmp	r3, #18
 8001486:	d130      	bne.n	80014ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014be:	2201      	movs	r2, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f003 0201 	and.w	r2, r3, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d118      	bne.n	8001528 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x128>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b12      	cmp	r3, #18
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80ac 	beq.w	800174a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b5e      	ldr	r3, [pc, #376]	; (800176c <HAL_GPIO_Init+0x32c>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a5d      	ldr	r2, [pc, #372]	; (800176c <HAL_GPIO_Init+0x32c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_GPIO_Init+0x32c>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800160a:	4a59      	ldr	r2, [pc, #356]	; (8001770 <HAL_GPIO_Init+0x330>)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001634:	d025      	beq.n	8001682 <HAL_GPIO_Init+0x242>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_GPIO_Init+0x334>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01f      	beq.n	800167e <HAL_GPIO_Init+0x23e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <HAL_GPIO_Init+0x338>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d019      	beq.n	800167a <HAL_GPIO_Init+0x23a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4c      	ldr	r2, [pc, #304]	; (800177c <HAL_GPIO_Init+0x33c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x236>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <HAL_GPIO_Init+0x340>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x232>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_GPIO_Init+0x344>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x22e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x348>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x22a>
 8001666:	2306      	movs	r3, #6
 8001668:	e00c      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800166a:	2307      	movs	r3, #7
 800166c:	e00a      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800166e:	2305      	movs	r3, #5
 8001670:	e008      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001672:	2304      	movs	r3, #4
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001676:	2303      	movs	r3, #3
 8001678:	e004      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800167a:	2302      	movs	r3, #2
 800167c:	e002      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001682:	2300      	movs	r3, #0
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4093      	lsls	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001694:	4936      	ldr	r1, [pc, #216]	; (8001770 <HAL_GPIO_Init+0x330>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016a2:	4b3a      	ldr	r3, [pc, #232]	; (800178c <HAL_GPIO_Init+0x34c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <HAL_GPIO_Init+0x34c>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_GPIO_Init+0x34c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016f0:	4a26      	ldr	r2, [pc, #152]	; (800178c <HAL_GPIO_Init+0x34c>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_GPIO_Init+0x34c>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_GPIO_Init+0x34c>)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_GPIO_Init+0x34c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_GPIO_Init+0x34c>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	f47f ae78 	bne.w	8001450 <HAL_GPIO_Init+0x10>
  }
}
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000
 8001770:	40010000 	.word	0x40010000
 8001774:	48000400 	.word	0x48000400
 8001778:	48000800 	.word	0x48000800
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48001000 	.word	0x48001000
 8001784:	48001400 	.word	0x48001400
 8001788:	48001800 	.word	0x48001800
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe ff08 	bl	8000624 <HAL_GPIO_EXTI_Callback>
  }
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40010400 	.word	0x40010400

08001820 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_PWREx_GetVoltageRange+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40007000 	.word	0x40007000

0800183c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184a:	d130      	bne.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001858:	d038      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001862:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2232      	movs	r2, #50	; 0x32
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001880:	e002      	b.n	8001888 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3b01      	subs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001894:	d102      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f2      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a8:	d110      	bne.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e00f      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ba:	d007      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e3d4      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fa:	4ba1      	ldr	r3, [pc, #644]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001904:	4b9e      	ldr	r3, [pc, #632]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80e4 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_RCC_OscConfig+0x4a>
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	f040 808b 	bne.w	8001a40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f040 8087 	bne.w	8001a40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001932:	4b93      	ldr	r3, [pc, #588]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e3ac      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_RCC_OscConfig+0x7c>
 800195a:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001962:	e005      	b.n	8001970 <HAL_RCC_OscConfig+0x88>
 8001964:	4b86      	ldr	r3, [pc, #536]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001970:	4293      	cmp	r3, r2
 8001972:	d223      	bcs.n	80019bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fd3f 	bl	80023fc <RCC_SetFlashLatencyFromMSIRange>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e38d      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001988:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a7c      	ldr	r2, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b7a      	ldr	r3, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4977      	ldr	r1, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4972      	ldr	r1, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
 80019ba:	e025      	b.n	8001a08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019bc:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a6f      	ldr	r2, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	496a      	ldr	r1, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019da:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	4965      	ldr	r1, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fcff 	bl	80023fc <RCC_SetFlashLatencyFromMSIRange>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e34d      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a08:	f000 fc36 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x29c>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa21 f303 	lsr.w	r3, r1, r3
 8001a24:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <HAL_RCC_OscConfig+0x2a0>)
 8001a26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a28:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fb5d 	bl	80010ec <HAL_InitTick>
 8001a32:	4603      	mov	r3, r0
 8001a34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d052      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	e331      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d032      	beq.n	8001aae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fb96 	bl	8001184 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb92 	bl	8001184 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e31a      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a40      	ldr	r2, [pc, #256]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	493b      	ldr	r1, [pc, #236]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a98:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	4936      	ldr	r1, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e01a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a33      	ldr	r2, [pc, #204]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fb63 	bl	8001184 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fb5f 	bl	8001184 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e2e7      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x1da>
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d074      	beq.n	8001bda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x21a>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d10e      	bne.n	8001b1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d064      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x2f0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d160      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e2c4      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x24a>
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e01d      	b.n	8001b6e <HAL_RCC_OscConfig+0x286>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x26e>
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x286>
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_RCC_OscConfig+0x298>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb05 	bl	8001184 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7c:	e011      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2ba>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	08004a30 	.word	0x08004a30
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff faf8 	bl	8001184 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e280      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba2:	4baf      	ldr	r3, [pc, #700]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2a8>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fae8 	bl	8001184 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fae4 	bl	8001184 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e26c      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bca:	4ba5      	ldr	r3, [pc, #660]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2d0>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d060      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x310>
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d119      	bne.n	8001c26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d116      	bne.n	8001c26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf8:	4b99      	ldr	r3, [pc, #612]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x328>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e249      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b93      	ldr	r3, [pc, #588]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	4990      	ldr	r1, [pc, #576]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c24:	e040      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d023      	beq.n	8001c76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2e:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a8b      	ldr	r2, [pc, #556]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff faa3 	bl	8001184 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff fa9f 	bl	8001184 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e227      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c54:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	497c      	ldr	r1, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
 8001c74:	e018      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a79      	ldr	r2, [pc, #484]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff fa7f 	bl	8001184 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fa7b 	bl	8001184 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e203      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d03c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	4a67      	ldr	r2, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fa5a 	bl	8001184 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fa56 	bl	8001184 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1de      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ef      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3ec>
 8001cf4:	e01b      	b.n	8001d2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfc:	4a58      	ldr	r2, [pc, #352]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d06:	f7ff fa3d 	bl	8001184 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fa39 	bl	8001184 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1c1      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d20:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ef      	bne.n	8001d0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80a6 	beq.w	8001e88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	4a43      	ldr	r2, [pc, #268]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
 8001d58:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_RCC_OscConfig+0x57c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d118      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x57c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_RCC_OscConfig+0x57c>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fa00 	bl	8001184 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d88:	f7ff f9fc 	bl	8001184 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e184      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9a:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <HAL_RCC_OscConfig+0x57c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4d8>
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db4:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dbe:	e024      	b.n	8001e0a <HAL_RCC_OscConfig+0x522>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d110      	bne.n	8001dea <HAL_RCC_OscConfig+0x502>
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de8:	e00f      	b.n	8001e0a <HAL_RCC_OscConfig+0x522>
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001e02:	f023 0304 	bic.w	r3, r3, #4
 8001e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff f9b7 	bl	8001184 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f9b3 	bl	8001184 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e139      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_OscConfig+0x578>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ed      	beq.n	8001e1a <HAL_RCC_OscConfig+0x532>
 8001e3e:	e01a      	b.n	8001e76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff f9a0 	bl	8001184 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e46:	e00f      	b.n	8001e68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7ff f99c 	bl	8001184 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d906      	bls.n	8001e68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e122      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e68:	4b90      	ldr	r3, [pc, #576]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1e8      	bne.n	8001e48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	4a8a      	ldr	r2, [pc, #552]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8108 	beq.w	80020a2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f040 80d0 	bne.w	800203c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e9c:	4b83      	ldr	r3, [pc, #524]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d130      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d127      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ecc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d11f      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001edc:	2a07      	cmp	r2, #7
 8001ede:	bf14      	ite	ne
 8001ee0:	2201      	movne	r2, #1
 8001ee2:	2200      	moveq	r2, #0
 8001ee4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d113      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d06e      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d069      	beq.n	8001fec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f18:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f24:	4b61      	ldr	r3, [pc, #388]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b7      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f34:	4b5d      	ldr	r3, [pc, #372]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5c      	ldr	r2, [pc, #368]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f40:	f7ff f920 	bl	8001184 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f91c 	bl	8001184 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0a4      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5a:	4b54      	ldr	r3, [pc, #336]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f66:	4b51      	ldr	r3, [pc, #324]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_RCC_OscConfig+0x7c8>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f76:	3a01      	subs	r2, #1
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f88:	0852      	lsrs	r2, r2, #1
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	0552      	lsls	r2, r2, #21
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f94:	0852      	lsrs	r2, r2, #1
 8001f96:	3a01      	subs	r2, #1
 8001f98:	0652      	lsls	r2, r2, #25
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa0:	0912      	lsrs	r2, r2, #4
 8001fa2:	0452      	lsls	r2, r2, #17
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	4941      	ldr	r1, [pc, #260]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fac:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3e      	ldr	r2, [pc, #248]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fb8:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc4:	f7ff f8de 	bl	8001184 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7ff f8da 	bl	8001184 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e062      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fde:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fea:	e05a      	b.n	80020a2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e059      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d152      	bne.n	80020a2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a27      	ldr	r2, [pc, #156]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002014:	f7ff f8b6 	bl	8001184 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff f8b2 	bl	8001184 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e03a      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x734>
 800203a:	e032      	b.n	80020a2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d02d      	beq.n	800209e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d105      	bne.n	8002066 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a13      	ldr	r2, [pc, #76]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002060:	f023 0303 	bic.w	r3, r3, #3
 8002064:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 800206c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002074:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff f885 	bl	8001184 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff f881 	bl	8001184 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e009      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_OscConfig+0x7c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x796>
 800209c:	e001      	b.n	80020a2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	f99d808c 	.word	0xf99d808c

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0c8      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d910      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0207 	bic.w	r2, r3, #7
 80020de:	4961      	ldr	r1, [pc, #388]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b0      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d04c      	beq.n	800219e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d107      	bne.n	800211c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210c:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d121      	bne.n	800215c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e09e      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d107      	bne.n	8002134 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d115      	bne.n	800215c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e092      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213c:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e086      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214c:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e07e      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800215c:	4b42      	ldr	r3, [pc, #264]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 0203 	bic.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	493f      	ldr	r1, [pc, #252]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800216e:	f7ff f809 	bl	8001184 <HAL_GetTick>
 8002172:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002174:	e00a      	b.n	800218c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002176:	f7ff f805 	bl	8001184 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e066      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 020c 	and.w	r2, r3, #12
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	429a      	cmp	r2, r3
 800219c:	d1eb      	bne.n	8002176 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	492c      	ldr	r1, [pc, #176]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d210      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4924      	ldr	r1, [pc, #144]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <HAL_RCC_ClockConfig+0x1b0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e036      	b.n	800225a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4918      	ldr	r1, [pc, #96]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4910      	ldr	r1, [pc, #64]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800222a:	f000 f825 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 800222e:	4601      	mov	r1, r0
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa21 f303 	lsr.w	r3, r1, r3
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe ff4c 	bl	80010ec <HAL_InitTick>
 8002254:	4603      	mov	r3, r0
 8002256:	72fb      	strb	r3, [r7, #11]

  return status;
 8002258:	7afb      	ldrb	r3, [r7, #11]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000
 800226c:	08004a30 	.word	0x08004a30
 8002270:	20000000 	.word	0x20000000
 8002274:	20000004 	.word	0x20000004

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002290:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x34>
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d121      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d11e      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022ac:	4b33      	ldr	r3, [pc, #204]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022b8:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e005      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10d      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d102      	bne.n	80022f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e004      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_RCC_GetSysClockFreq+0x110>)
 80022fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d133      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002306:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0xa4>
 8002316:	2b03      	cmp	r3, #3
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0xaa>
 800231a:	e005      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_GetSysClockFreq+0x10c>)
 800231e:	617b      	str	r3, [r7, #20]
      break;
 8002320:	e005      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_GetSysClockFreq+0x110>)
 8002324:	617b      	str	r3, [r7, #20]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	617b      	str	r3, [r7, #20]
      break;
 800232c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	3301      	adds	r3, #1
 800233a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	fb02 f203 	mul.w	r2, r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_GetSysClockFreq+0x104>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0e5b      	lsrs	r3, r3, #25
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800236e:	69bb      	ldr	r3, [r7, #24]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3724      	adds	r7, #36	; 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000
 8002380:	08004a48 	.word	0x08004a48
 8002384:	00f42400 	.word	0x00f42400
 8002388:	007a1200 	.word	0x007a1200

0800238c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023a8:	f7ff fff0 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ac:	4601      	mov	r1, r0
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08004a40 	.word	0x08004a40

080023d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023d4:	f7ff ffda 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023d8:	4601      	mov	r1, r0
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0adb      	lsrs	r3, r3, #11
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08004a40 	.word	0x08004a40

080023fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002414:	f7ff fa04 	bl	8001820 <HAL_PWREx_GetVoltageRange>
 8002418:	6178      	str	r0, [r7, #20]
 800241a:	e014      	b.n	8002446 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002426:	6593      	str	r3, [r2, #88]	; 0x58
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002434:	f7ff f9f4 	bl	8001820 <HAL_PWREx_GetVoltageRange>
 8002438:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244c:	d10b      	bne.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d919      	bls.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2ba0      	cmp	r3, #160	; 0xa0
 8002458:	d902      	bls.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245a:	2302      	movs	r3, #2
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	e013      	b.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002460:	2301      	movs	r3, #1
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e010      	b.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d902      	bls.n	8002472 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800246c:	2303      	movs	r3, #3
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e00a      	b.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d102      	bne.n	800247e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002478:	2302      	movs	r3, #2
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	e004      	b.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b70      	cmp	r3, #112	; 0x70
 8002482:	d101      	bne.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002484:	2301      	movs	r3, #1
 8002486:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 0207 	bic.w	r2, r3, #7
 8002490:	4909      	ldr	r1, [pc, #36]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d001      	beq.n	80024aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40022000 	.word	0x40022000

080024bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024c4:	2300      	movs	r3, #0
 80024c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024c8:	2300      	movs	r3, #0
 80024ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d03f      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e0:	d01c      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d802      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00e      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80024ec:	e01f      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f2:	d003      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f8:	d01c      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024fa:	e018      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024fc:	4b85      	ldr	r3, [pc, #532]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a84      	ldr	r2, [pc, #528]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002506:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002508:	e015      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fab9 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800251a:	e00c      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3320      	adds	r3, #32
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fba0 	bl	8002c68 <RCCEx_PLLSAI2_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800252c:	e003      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	74fb      	strb	r3, [r7, #19]
      break;
 8002532:	e000      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254a:	4972      	ldr	r1, [pc, #456]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002552:	e001      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d03f      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800256c:	d01c      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800256e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002572:	d802      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002578:	e01f      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800257a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800257e:	d003      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002584:	d01c      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002586:	e018      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002588:	4b62      	ldr	r3, [pc, #392]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a61      	ldr	r2, [pc, #388]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002594:	e015      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fa73 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3320      	adds	r3, #32
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fb5a 	bl	8002c68 <RCCEx_PLLSAI2_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b8:	e003      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	74fb      	strb	r3, [r7, #19]
      break;
 80025be:	e000      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80025c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025c8:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d6:	494f      	ldr	r1, [pc, #316]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025de:	e001      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a0 	beq.w	8002732 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a40      	ldr	r2, [pc, #256]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002628:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002634:	f7fe fda6 	bl	8001184 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263a:	e009      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fe fda2 	bl	8001184 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	74fb      	strb	r3, [r7, #19]
        break;
 800264e:	e005      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002650:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d15c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01f      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	429a      	cmp	r2, r3
 800267e:	d019      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fd61 	bl	8001184 <HAL_GetTick>
 80026c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c4:	e00b      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fd5d 	bl	8001184 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d902      	bls.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	74fb      	strb	r3, [r7, #19]
            break;
 80026dc:	e006      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ec      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002702:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800270a:	e009      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
 8002710:	e006      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002720:	7c7b      	ldrb	r3, [r7, #17]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	4a9d      	ldr	r2, [pc, #628]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273e:	4b98      	ldr	r3, [pc, #608]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f023 0203 	bic.w	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	4994      	ldr	r1, [pc, #592]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002760:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f023 020c 	bic.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	498c      	ldr	r1, [pc, #560]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002782:	4b87      	ldr	r3, [pc, #540]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4983      	ldr	r1, [pc, #524]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a4:	4b7e      	ldr	r3, [pc, #504]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	497b      	ldr	r1, [pc, #492]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d4:	4972      	ldr	r1, [pc, #456]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e8:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	496a      	ldr	r1, [pc, #424]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	4961      	ldr	r1, [pc, #388]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	4959      	ldr	r1, [pc, #356]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284e:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285c:	4950      	ldr	r1, [pc, #320]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	4948      	ldr	r1, [pc, #288]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	493f      	ldr	r1, [pc, #252]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d028      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c2:	4937      	ldr	r1, [pc, #220]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d2:	d106      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
 80028e0:	e011      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ea:	d10c      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f8c8 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d028      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	491f      	ldr	r1, [pc, #124]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002930:	d106      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293c:	60d3      	str	r3, [r2, #12]
 800293e:	e011      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002948:	d10c      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f899 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02b      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298e:	d109      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a02      	ldr	r2, [pc, #8]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800299a:	60d3      	str	r3, [r2, #12]
 800299c:	e014      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f867 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02f      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e2:	4928      	ldr	r1, [pc, #160]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f2:	d10d      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2102      	movs	r1, #2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f844 	bl	8002a88 <RCCEx_PLLSAI1_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	74bb      	strb	r3, [r7, #18]
 8002a0e:	e011      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3320      	adds	r3, #32
 8002a1e:	2102      	movs	r1, #2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f921 	bl	8002c68 <RCCEx_PLLSAI2_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4e:	490d      	ldr	r1, [pc, #52]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a72:	4904      	ldr	r1, [pc, #16]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000

08002a88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a96:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d018      	beq.n	8002ad4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aa2:	4b70      	ldr	r3, [pc, #448]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0203 	and.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d10d      	bne.n	8002ace <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aba:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d044      	beq.n	8002b58 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	e041      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d00c      	beq.n	8002af6 <RCCEx_PLLSAI1_Config+0x6e>
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d013      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x80>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d120      	bne.n	8002b26 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11d      	bne.n	8002b2c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af4:	e01a      	b.n	8002b2c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af6:	4b5b      	ldr	r3, [pc, #364]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e013      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b08:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b24:	e006      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2a:	e004      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b2c:	bf00      	nop
 8002b2e:	e002      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b34:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b3c:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	430b      	orrs	r3, r1
 8002b52:	4944      	ldr	r1, [pc, #272]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d17d      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b5e:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fb0b 	bl	8001184 <HAL_GetTick>
 8002b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b70:	e009      	b.n	8002b86 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b72:	f7fe fb07 	bl	8001184 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d902      	bls.n	8002b86 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	73fb      	strb	r3, [r7, #15]
        break;
 8002b84:	e005      	b.n	8002b92 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ef      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d160      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d111      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	0211      	lsls	r1, r2, #8
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68d2      	ldr	r2, [r2, #12]
 8002bb4:	0912      	lsrs	r2, r2, #4
 8002bb6:	0452      	lsls	r2, r2, #17
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	492a      	ldr	r1, [pc, #168]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	610b      	str	r3, [r1, #16]
 8002bc0:	e027      	b.n	8002c12 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d112      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc8:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6892      	ldr	r2, [r2, #8]
 8002bd8:	0211      	lsls	r1, r2, #8
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6912      	ldr	r2, [r2, #16]
 8002bde:	0852      	lsrs	r2, r2, #1
 8002be0:	3a01      	subs	r2, #1
 8002be2:	0552      	lsls	r2, r2, #21
 8002be4:	430a      	orrs	r2, r1
 8002be6:	491f      	ldr	r1, [pc, #124]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	610b      	str	r3, [r1, #16]
 8002bec:	e011      	b.n	8002c12 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6892      	ldr	r2, [r2, #8]
 8002bfe:	0211      	lsls	r1, r2, #8
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6952      	ldr	r2, [r2, #20]
 8002c04:	0852      	lsrs	r2, r2, #1
 8002c06:	3a01      	subs	r2, #1
 8002c08:	0652      	lsls	r2, r2, #25
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	4915      	ldr	r1, [pc, #84]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fab1 	bl	8001184 <HAL_GetTick>
 8002c22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c24:	e009      	b.n	8002c3a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c26:	f7fe faad 	bl	8001184 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d902      	bls.n	8002c3a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	73fb      	strb	r3, [r7, #15]
          break;
 8002c38:	e005      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ef      	beq.n	8002c26 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000

08002c68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c76:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d018      	beq.n	8002cb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c82:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0203 	and.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d10d      	bne.n	8002cae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
       ||
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
       ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d044      	beq.n	8002d38 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	e041      	b.n	8002d38 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d00c      	beq.n	8002cd6 <RCCEx_PLLSAI2_Config+0x6e>
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d013      	beq.n	8002ce8 <RCCEx_PLLSAI2_Config+0x80>
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d120      	bne.n	8002d06 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc4:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11d      	bne.n	8002d0c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd4:	e01a      	b.n	8002d0c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd6:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce6:	e013      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf4:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d04:	e006      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0a:	e004      	b.n	8002d16 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e002      	b.n	8002d16 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d14:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6819      	ldr	r1, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	430b      	orrs	r3, r1
 8002d32:	4939      	ldr	r1, [pc, #228]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d167      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4a:	f7fe fa1b 	bl	8001184 <HAL_GetTick>
 8002d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d50:	e009      	b.n	8002d66 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d52:	f7fe fa17 	bl	8001184 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d902      	bls.n	8002d66 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	73fb      	strb	r3, [r7, #15]
        break;
 8002d64:	e005      	b.n	8002d72 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ef      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d14a      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d111      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6892      	ldr	r2, [r2, #8]
 8002d8e:	0211      	lsls	r1, r2, #8
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68d2      	ldr	r2, [r2, #12]
 8002d94:	0912      	lsrs	r2, r2, #4
 8002d96:	0452      	lsls	r2, r2, #17
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	491f      	ldr	r1, [pc, #124]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	614b      	str	r3, [r1, #20]
 8002da0:	e011      	b.n	8002dc6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002daa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6892      	ldr	r2, [r2, #8]
 8002db2:	0211      	lsls	r1, r2, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6912      	ldr	r2, [r2, #16]
 8002db8:	0852      	lsrs	r2, r2, #1
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0652      	lsls	r2, r2, #25
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	4915      	ldr	r1, [pc, #84]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe f9d7 	bl	8001184 <HAL_GetTick>
 8002dd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dd8:	e009      	b.n	8002dee <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dda:	f7fe f9d3 	bl	8001184 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d902      	bls.n	8002dee <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	73fb      	strb	r3, [r7, #15]
          break;
 8002dec:	e005      	b.n	8002dfa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ef      	beq.n	8002dda <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e01d      	b.n	8002e6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fd ffb8 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fa34 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_TIM_Base_Start_IT+0x50>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_TIM_Base_Start_IT+0x42>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d007      	beq.n	8002eb6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	00010007 	.word	0x00010007

08002ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0202 	mvn.w	r2, #2
 8002ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9be 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9b0 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f9c1 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0204 	mvn.w	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f994 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f986 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f997 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f96a 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f95c 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f96d 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f940 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f932 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f943 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0201 	mvn.w	r2, #1
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fb30 	bl	80006ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 faee 	bl	8003654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003086:	d10e      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d107      	bne.n	80030a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800309e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fae1 	bl	8003668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d10e      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d107      	bne.n	80030d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8f1 	bl	80032b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d10e      	bne.n	80030fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d107      	bne.n	80030fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f06f 0220 	mvn.w	r2, #32
 80030f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 faa1 	bl	8003640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_TIM_ConfigClockSource+0x18>
 800311a:	2302      	movs	r3, #2
 800311c:	e0a8      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x16a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003140:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003148:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d067      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x124>
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d80b      	bhi.n	8003176 <HAL_TIM_ConfigClockSource+0x70>
 800315e:	2b10      	cmp	r3, #16
 8003160:	d073      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x144>
 8003162:	2b10      	cmp	r3, #16
 8003164:	d802      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x66>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d06f      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800316a:	e078      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800316c:	2b20      	cmp	r3, #32
 800316e:	d06c      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x144>
 8003170:	2b30      	cmp	r3, #48	; 0x30
 8003172:	d06a      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003174:	e073      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003176:	2b70      	cmp	r3, #112	; 0x70
 8003178:	d00d      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x90>
 800317a:	2b70      	cmp	r3, #112	; 0x70
 800317c:	d804      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x82>
 800317e:	2b50      	cmp	r3, #80	; 0x50
 8003180:	d033      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0xe4>
 8003182:	2b60      	cmp	r3, #96	; 0x60
 8003184:	d041      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003186:	e06a      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	d066      	beq.n	800325c <HAL_TIM_ConfigClockSource+0x156>
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003192:	d017      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003194:	e063      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f000 f9a3 	bl	80034f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	609a      	str	r2, [r3, #8]
      break;
 80031c2:	e04c      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f000 f98c 	bl	80034f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e6:	609a      	str	r2, [r3, #8]
      break;
 80031e8:	e039      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 f900 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2150      	movs	r1, #80	; 0x50
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f959 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8003208:	e029      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	461a      	mov	r2, r3
 8003218:	f000 f91f 	bl	800345a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2160      	movs	r1, #96	; 0x60
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f949 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8003228:	e019      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	461a      	mov	r2, r3
 8003238:	f000 f8e0 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2140      	movs	r1, #64	; 0x40
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f939 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 8003248:	e009      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f000 f930 	bl	80034ba <TIM_ITRx_SetConfig>
      break;
 800325a:	e000      	b.n	800325e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800325c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a40      	ldr	r2, [pc, #256]	; (80033dc <TIM_Base_SetConfig+0x114>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e6:	d00f      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <TIM_Base_SetConfig+0x118>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00b      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3c      	ldr	r2, [pc, #240]	; (80033e4 <TIM_Base_SetConfig+0x11c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a3b      	ldr	r2, [pc, #236]	; (80033e8 <TIM_Base_SetConfig+0x120>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3a      	ldr	r2, [pc, #232]	; (80033ec <TIM_Base_SetConfig+0x124>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d108      	bne.n	800331a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2f      	ldr	r2, [pc, #188]	; (80033dc <TIM_Base_SetConfig+0x114>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003328:	d01b      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2c      	ldr	r2, [pc, #176]	; (80033e0 <TIM_Base_SetConfig+0x118>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d017      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2b      	ldr	r2, [pc, #172]	; (80033e4 <TIM_Base_SetConfig+0x11c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <TIM_Base_SetConfig+0x120>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00f      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a29      	ldr	r2, [pc, #164]	; (80033ec <TIM_Base_SetConfig+0x124>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <TIM_Base_SetConfig+0x128>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <TIM_Base_SetConfig+0x12c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_Base_SetConfig+0x9a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <TIM_Base_SetConfig+0x130>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d108      	bne.n	8003374 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <TIM_Base_SetConfig+0x114>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00f      	beq.n	80033c0 <TIM_Base_SetConfig+0xf8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a12      	ldr	r2, [pc, #72]	; (80033ec <TIM_Base_SetConfig+0x124>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <TIM_Base_SetConfig+0xf8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a11      	ldr	r2, [pc, #68]	; (80033f0 <TIM_Base_SetConfig+0x128>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <TIM_Base_SetConfig+0xf8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <TIM_Base_SetConfig+0x12c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_Base_SetConfig+0xf8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <TIM_Base_SetConfig+0x130>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d103      	bne.n	80033c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	615a      	str	r2, [r3, #20]
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800
 80033e8:	40000c00 	.word	0x40000c00
 80033ec:	40013400 	.word	0x40013400
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345a:	b480      	push	{r7}
 800345c:	b087      	sub	sp, #28
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0210 	bic.w	r2, r3, #16
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	031b      	lsls	r3, r3, #12
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f043 0307 	orr.w	r3, r3, #7
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800350a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	431a      	orrs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003544:	2302      	movs	r3, #2
 8003546:	e068      	b.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2d      	ldr	r2, [pc, #180]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d108      	bne.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003582:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003594:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1e      	ldr	r2, [pc, #120]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01d      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d018      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40013400 	.word	0x40013400
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800
 8003638:	40000c00 	.word	0x40000c00
 800363c:	40014000 	.word	0x40014000

08003640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e040      	b.n	8003710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fd fbca 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	; 0x24
 80036a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fb18 	bl	8003cf0 <UART_SetConfig>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e022      	b.n	8003710 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fe7e 	bl	80043d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 ff05 	bl	8004518 <UART_CheckIdleState>
 800370e:	4603      	mov	r3, r0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	2b20      	cmp	r3, #32
 800372e:	f040 8081 	bne.w	8003834 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_UART_Transmit+0x26>
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e079      	b.n	8003836 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_UART_Transmit+0x38>
 800374c:	2302      	movs	r3, #2
 800374e:	e072      	b.n	8003836 <HAL_UART_Transmit+0x11e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2221      	movs	r2, #33	; 0x21
 8003762:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003764:	f7fd fd0e 	bl	8001184 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	d108      	bne.n	8003796 <HAL_UART_Transmit+0x7e>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e003      	b.n	800379e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80037a6:	e02d      	b.n	8003804 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2200      	movs	r2, #0
 80037b0:	2180      	movs	r1, #128	; 0x80
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fef5 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e039      	b.n	8003836 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d4:	b292      	uxth	r2, r2
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	3302      	adds	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e008      	b.n	80037f2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b292      	uxth	r2, r2
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1cb      	bne.n	80037a8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	2140      	movs	r1, #64	; 0x40
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fec1 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e005      	b.n	8003836 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003852:	2b20      	cmp	r3, #32
 8003854:	d144      	bne.n	80038e0 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_Transmit_IT+0x22>
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e03d      	b.n	80038e2 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_UART_Transmit_IT+0x34>
 8003870:	2302      	movs	r3, #2
 8003872:	e036      	b.n	80038e2 <HAL_UART_Transmit_IT+0xa2>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2221      	movs	r2, #33	; 0x21
 80038a2:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d107      	bne.n	80038be <HAL_UART_Transmit_IT+0x7e>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_UART_Transmit_IT+0xb0>)
 80038ba:	665a      	str	r2, [r3, #100]	; 0x64
 80038bc:	e002      	b.n	80038c4 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_UART_Transmit_IT+0xb4>)
 80038c2:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038da:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	08004779 	.word	0x08004779
 80038f4:	08004705 	.word	0x08004705

080038f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800390a:	2b20      	cmp	r3, #32
 800390c:	f040 808a 	bne.w	8003a24 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Receive_IT+0x24>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e082      	b.n	8003a26 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_UART_Receive_IT+0x36>
 800392a:	2302      	movs	r3, #2
 800392c:	e07b      	b.n	8003a26 <HAL_UART_Receive_IT+0x12e>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d10e      	bne.n	800397a <HAL_UART_Receive_IT+0x82>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_UART_Receive_IT+0x78>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f240 12ff 	movw	r2, #511	; 0x1ff
 800396a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800396e:	e02d      	b.n	80039cc <HAL_UART_Receive_IT+0xd4>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	22ff      	movs	r2, #255	; 0xff
 8003974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003978:	e028      	b.n	80039cc <HAL_UART_Receive_IT+0xd4>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_UART_Receive_IT+0xa6>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Receive_IT+0x9c>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003992:	e01b      	b.n	80039cc <HAL_UART_Receive_IT+0xd4>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	227f      	movs	r2, #127	; 0x7f
 8003998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800399c:	e016      	b.n	80039cc <HAL_UART_Receive_IT+0xd4>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a6:	d10d      	bne.n	80039c4 <HAL_UART_Receive_IT+0xcc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_UART_Receive_IT+0xc2>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	227f      	movs	r2, #127	; 0x7f
 80039b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b8:	e008      	b.n	80039cc <HAL_UART_Receive_IT+0xd4>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	223f      	movs	r2, #63	; 0x3f
 80039be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039c2:	e003      	b.n	80039cc <HAL_UART_Receive_IT+0xd4>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2222      	movs	r2, #34	; 0x22
 80039d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f0:	d107      	bne.n	8003a02 <HAL_UART_Receive_IT+0x10a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a0d      	ldr	r2, [pc, #52]	; (8003a34 <HAL_UART_Receive_IT+0x13c>)
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
 8003a00:	e002      	b.n	8003a08 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <HAL_UART_Receive_IT+0x140>)
 8003a06:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003a1e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	080048d1 	.word	0x080048d1
 8003a38:	08004827 	.word	0x08004827

08003a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d113      	bne.n	8003a94 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8114 	beq.w	8003cb2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
      }
      return;
 8003a92:	e10e      	b.n	8003cb2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80d6 	beq.w	8003c48 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d105      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80cb 	beq.w	8003c48 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <HAL_UART_IRQHandler+0x9e>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <HAL_UART_IRQHandler+0xc6>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afa:	f043 0204 	orr.w	r2, r3, #4
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <HAL_UART_IRQHandler+0xee>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b54:	f043 0208 	orr.w	r2, r3, #8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00f      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14a>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7e:	f043 0220 	orr.w	r2, r3, #32
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8093 	beq.w	8003cb6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d004      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d031      	beq.n	8003c36 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fd60 	bl	8004698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d123      	bne.n	8003c2e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d013      	beq.n	8003c26 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c02:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <HAL_UART_IRQHandler+0x288>)
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fbd7 	bl	80013be <HAL_DMA_Abort_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e00e      	b.n	8003c44 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f858 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00a      	b.n	8003c44 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f854 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e006      	b.n	8003c44 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f850 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003c42:	e038      	b.n	8003cb6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	bf00      	nop
    return;
 8003c46:	e036      	b.n	8003cb6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00d      	beq.n	8003c6e <HAL_UART_IRQHandler+0x232>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fe87 	bl	800497a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c6c:	e026      	b.n	8003cbc <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d017      	beq.n	8003cba <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
    }
    return;
 8003c92:	e012      	b.n	8003cba <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <HAL_UART_IRQHandler+0x280>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fda3 	bl	80047f4 <UART_EndTransmit_IT>
    return;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <HAL_UART_IRQHandler+0x280>
      return;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_UART_IRQHandler+0x280>
    return;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_UART_IRQHandler+0x280>
    return;
 8003cba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	080046d9 	.word	0x080046d9

08003cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003cf4:	b08a      	sub	sp, #40	; 0x28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4bb8      	ldr	r3, [pc, #736]	; (8004008 <UART_SetConfig+0x318>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4aae      	ldr	r2, [pc, #696]	; (800400c <UART_SetConfig+0x31c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4aa5      	ldr	r2, [pc, #660]	; (8004010 <UART_SetConfig+0x320>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d126      	bne.n	8003dce <UART_SetConfig+0xde>
 8003d80:	4ba4      	ldr	r3, [pc, #656]	; (8004014 <UART_SetConfig+0x324>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d81a      	bhi.n	8003dc4 <UART_SetConfig+0xd4>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0xa4>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003dbd 	.word	0x08003dbd
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e105      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003dac:	2302      	movs	r3, #2
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db2:	e101      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003db4:	2304      	movs	r3, #4
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dba:	e0fd      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e0f9      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dca:	bf00      	nop
 8003dcc:	e0f4      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a91      	ldr	r2, [pc, #580]	; (8004018 <UART_SetConfig+0x328>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d138      	bne.n	8003e4a <UART_SetConfig+0x15a>
 8003dd8:	4b8e      	ldr	r3, [pc, #568]	; (8004014 <UART_SetConfig+0x324>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d82c      	bhi.n	8003e40 <UART_SetConfig+0x150>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <UART_SetConfig+0xfc>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e41 	.word	0x08003e41
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
 8003e0c:	08003e29 	.word	0x08003e29
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	08003e39 	.word	0x08003e39
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e26:	e0c7      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2e:	e0c3      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e30:	2304      	movs	r3, #4
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e36:	e0bf      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3e:	e0bb      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e46:	bf00      	nop
 8003e48:	e0b6      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a73      	ldr	r2, [pc, #460]	; (800401c <UART_SetConfig+0x32c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d125      	bne.n	8003ea0 <UART_SetConfig+0x1b0>
 8003e54:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <UART_SetConfig+0x324>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d011      	beq.n	8003e86 <UART_SetConfig+0x196>
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d802      	bhi.n	8003e6c <UART_SetConfig+0x17c>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <UART_SetConfig+0x186>
 8003e6a:	e014      	b.n	8003e96 <UART_SetConfig+0x1a6>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d006      	beq.n	8003e7e <UART_SetConfig+0x18e>
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	d00c      	beq.n	8003e8e <UART_SetConfig+0x19e>
 8003e74:	e00f      	b.n	8003e96 <UART_SetConfig+0x1a6>
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7c:	e09c      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e84:	e098      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e86:	2304      	movs	r3, #4
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8c:	e094      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e94:	e090      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003e96:	2310      	movs	r3, #16
 8003e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9c:	bf00      	nop
 8003e9e:	e08b      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a5e      	ldr	r2, [pc, #376]	; (8004020 <UART_SetConfig+0x330>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d125      	bne.n	8003ef6 <UART_SetConfig+0x206>
 8003eaa:	4b5a      	ldr	r3, [pc, #360]	; (8004014 <UART_SetConfig+0x324>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d011      	beq.n	8003edc <UART_SetConfig+0x1ec>
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d802      	bhi.n	8003ec2 <UART_SetConfig+0x1d2>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <UART_SetConfig+0x1dc>
 8003ec0:	e014      	b.n	8003eec <UART_SetConfig+0x1fc>
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d006      	beq.n	8003ed4 <UART_SetConfig+0x1e4>
 8003ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ec8:	d00c      	beq.n	8003ee4 <UART_SetConfig+0x1f4>
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x1fc>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e071      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e06d      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003edc:	2304      	movs	r3, #4
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e069      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eea:	e065      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003eec:	2310      	movs	r3, #16
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef2:	bf00      	nop
 8003ef4:	e060      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4a      	ldr	r2, [pc, #296]	; (8004024 <UART_SetConfig+0x334>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d129      	bne.n	8003f54 <UART_SetConfig+0x264>
 8003f00:	4b44      	ldr	r3, [pc, #272]	; (8004014 <UART_SetConfig+0x324>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0e:	d014      	beq.n	8003f3a <UART_SetConfig+0x24a>
 8003f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f14:	d802      	bhi.n	8003f1c <UART_SetConfig+0x22c>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <UART_SetConfig+0x23a>
 8003f1a:	e016      	b.n	8003f4a <UART_SetConfig+0x25a>
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d007      	beq.n	8003f32 <UART_SetConfig+0x242>
 8003f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f26:	d00c      	beq.n	8003f42 <UART_SetConfig+0x252>
 8003f28:	e00f      	b.n	8003f4a <UART_SetConfig+0x25a>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f30:	e042      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003f32:	2302      	movs	r3, #2
 8003f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f38:	e03e      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f40:	e03a      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003f42:	2308      	movs	r3, #8
 8003f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f48:	e036      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f50:	bf00      	nop
 8003f52:	e031      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2c      	ldr	r2, [pc, #176]	; (800400c <UART_SetConfig+0x31c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d129      	bne.n	8003fb2 <UART_SetConfig+0x2c2>
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <UART_SetConfig+0x324>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d014      	beq.n	8003f98 <UART_SetConfig+0x2a8>
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f72:	d802      	bhi.n	8003f7a <UART_SetConfig+0x28a>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <UART_SetConfig+0x298>
 8003f78:	e016      	b.n	8003fa8 <UART_SetConfig+0x2b8>
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7e:	d007      	beq.n	8003f90 <UART_SetConfig+0x2a0>
 8003f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f84:	d00c      	beq.n	8003fa0 <UART_SetConfig+0x2b0>
 8003f86:	e00f      	b.n	8003fa8 <UART_SetConfig+0x2b8>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8e:	e013      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003f90:	2302      	movs	r3, #2
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f96:	e00f      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9e:	e00b      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa6:	e007      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <UART_SetConfig+0x2c8>
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <UART_SetConfig+0x31c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	f040 80fe 	bne.w	80041c0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d837      	bhi.n	800403c <UART_SetConfig+0x34c>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x2e4>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	0800403d 	.word	0x0800403d
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	0800403d 	.word	0x0800403d
 8003fe4:	0800402d 	.word	0x0800402d
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	0800403d 	.word	0x0800403d
 8003ff0:	0800403d 	.word	0x0800403d
 8003ff4:	08004035 	.word	0x08004035
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe f9d4 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ffe:	e020      	b.n	8004042 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <UART_SetConfig+0x338>)
 8004002:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004004:	e01d      	b.n	8004042 <UART_SetConfig+0x352>
 8004006:	bf00      	nop
 8004008:	efff69f3 	.word	0xefff69f3
 800400c:	40008000 	.word	0x40008000
 8004010:	40013800 	.word	0x40013800
 8004014:	40021000 	.word	0x40021000
 8004018:	40004400 	.word	0x40004400
 800401c:	40004800 	.word	0x40004800
 8004020:	40004c00 	.word	0x40004c00
 8004024:	40005000 	.word	0x40005000
 8004028:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800402c:	f7fe f924 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8004030:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004032:	e006      	b.n	8004042 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004038:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800403a:	e002      	b.n	8004042 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	76fb      	strb	r3, [r7, #27]
        break;
 8004040:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 81b9 	beq.w	80043bc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	429a      	cmp	r2, r3
 8004058:	d305      	bcc.n	8004066 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	429a      	cmp	r2, r3
 8004064:	d902      	bls.n	800406c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	76fb      	strb	r3, [r7, #27]
 800406a:	e1a7      	b.n	80043bc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800406c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004070:	2b08      	cmp	r3, #8
 8004072:	f200 8092 	bhi.w	800419a <UART_SetConfig+0x4aa>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <UART_SetConfig+0x38c>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	080040a1 	.word	0x080040a1
 8004080:	0800419b 	.word	0x0800419b
 8004084:	080040ef 	.word	0x080040ef
 8004088:	0800419b 	.word	0x0800419b
 800408c:	08004123 	.word	0x08004123
 8004090:	0800419b 	.word	0x0800419b
 8004094:	0800419b 	.word	0x0800419b
 8004098:	0800419b 	.word	0x0800419b
 800409c:	08004171 	.word	0x08004171
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe f980 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80040a4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4619      	mov	r1, r3
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	0214      	lsls	r4, r2, #8
 80040b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040bc:	020b      	lsls	r3, r1, #8
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6852      	ldr	r2, [r2, #4]
 80040c2:	0852      	lsrs	r2, r2, #1
 80040c4:	4611      	mov	r1, r2
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	eb13 0b01 	adds.w	fp, r3, r1
 80040ce:	eb44 0c02 	adc.w	ip, r4, r2
 80040d2:	4658      	mov	r0, fp
 80040d4:	4661      	mov	r1, ip
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f04f 0400 	mov.w	r4, #0
 80040de:	461a      	mov	r2, r3
 80040e0:	4623      	mov	r3, r4
 80040e2:	f7fc f871 	bl	80001c8 <__aeabi_uldivmod>
 80040e6:	4603      	mov	r3, r0
 80040e8:	460c      	mov	r4, r1
 80040ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040ec:	e058      	b.n	80041a0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	49ae      	ldr	r1, [pc, #696]	; (80043b4 <UART_SetConfig+0x6c4>)
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	eb13 0b01 	adds.w	fp, r3, r1
 8004102:	eb44 0c02 	adc.w	ip, r4, r2
 8004106:	4658      	mov	r0, fp
 8004108:	4661      	mov	r1, ip
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f04f 0400 	mov.w	r4, #0
 8004112:	461a      	mov	r2, r3
 8004114:	4623      	mov	r3, r4
 8004116:	f7fc f857 	bl	80001c8 <__aeabi_uldivmod>
 800411a:	4603      	mov	r3, r0
 800411c:	460c      	mov	r4, r1
 800411e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004120:	e03e      	b.n	80041a0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004122:	f7fe f8a9 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8004126:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4619      	mov	r1, r3
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	f04f 0400 	mov.w	r4, #0
 8004138:	0214      	lsls	r4, r2, #8
 800413a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800413e:	020b      	lsls	r3, r1, #8
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6852      	ldr	r2, [r2, #4]
 8004144:	0852      	lsrs	r2, r2, #1
 8004146:	4611      	mov	r1, r2
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	eb13 0b01 	adds.w	fp, r3, r1
 8004150:	eb44 0c02 	adc.w	ip, r4, r2
 8004154:	4658      	mov	r0, fp
 8004156:	4661      	mov	r1, ip
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	461a      	mov	r2, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f7fc f830 	bl	80001c8 <__aeabi_uldivmod>
 8004168:	4603      	mov	r3, r0
 800416a:	460c      	mov	r4, r1
 800416c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800416e:	e017      	b.n	80041a0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800417e:	f144 0100 	adc.w	r1, r4, #0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f04f 0400 	mov.w	r4, #0
 800418a:	461a      	mov	r2, r3
 800418c:	4623      	mov	r3, r4
 800418e:	f7fc f81b 	bl	80001c8 <__aeabi_uldivmod>
 8004192:	4603      	mov	r3, r0
 8004194:	460c      	mov	r4, r1
 8004196:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004198:	e002      	b.n	80041a0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	76fb      	strb	r3, [r7, #27]
            break;
 800419e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a6:	d308      	bcc.n	80041ba <UART_SetConfig+0x4ca>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ae:	d204      	bcs.n	80041ba <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	e100      	b.n	80043bc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	76fb      	strb	r3, [r7, #27]
 80041be:	e0fd      	b.n	80043bc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	f040 8084 	bne.w	80042d4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80041cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d85f      	bhi.n	8004294 <UART_SetConfig+0x5a4>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x4ec>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004221 	.word	0x08004221
 80041e4:	08004241 	.word	0x08004241
 80041e8:	08004295 	.word	0x08004295
 80041ec:	0800425d 	.word	0x0800425d
 80041f0:	08004295 	.word	0x08004295
 80041f4:	08004295 	.word	0x08004295
 80041f8:	08004295 	.word	0x08004295
 80041fc:	0800427d 	.word	0x0800427d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe f8d0 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8004204:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	b29b      	uxth	r3, r3
 800421c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800421e:	e03c      	b.n	800429a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7fe f8d6 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 8004224:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	005a      	lsls	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	b29b      	uxth	r3, r3
 800423c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800423e:	e02c      	b.n	800429a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800424a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6852      	ldr	r2, [r2, #4]
 8004252:	fbb3 f3f2 	udiv	r3, r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800425a:	e01e      	b.n	800429a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425c:	f7fe f80c 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8004260:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	005a      	lsls	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	b29b      	uxth	r3, r3
 8004278:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800427a:	e00e      	b.n	800429a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	b29b      	uxth	r3, r3
 8004290:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004292:	e002      	b.n	800429a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	76fb      	strb	r3, [r7, #27]
        break;
 8004298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	d916      	bls.n	80042ce <UART_SetConfig+0x5de>
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d212      	bcs.n	80042ce <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f023 030f 	bic.w	r3, r3, #15
 80042b0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	b29a      	uxth	r2, r3
 80042be:	89fb      	ldrh	r3, [r7, #14]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	89fa      	ldrh	r2, [r7, #14]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e076      	b.n	80043bc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	76fb      	strb	r3, [r7, #27]
 80042d2:	e073      	b.n	80043bc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80042d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d85c      	bhi.n	8004396 <UART_SetConfig+0x6a6>
 80042dc:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0x5f4>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004327 	.word	0x08004327
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004397 	.word	0x08004397
 80042f4:	08004361 	.word	0x08004361
 80042f8:	08004397 	.word	0x08004397
 80042fc:	08004397 	.word	0x08004397
 8004300:	08004397 	.word	0x08004397
 8004304:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004308:	f7fe f84c 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 800430c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	085a      	lsrs	r2, r3, #1
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	441a      	add	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	b29b      	uxth	r3, r3
 8004322:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004324:	e03a      	b.n	800439c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004326:	f7fe f853 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 800432a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	085a      	lsrs	r2, r3, #1
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	441a      	add	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004342:	e02b      	b.n	800439c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800434e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6852      	ldr	r2, [r2, #4]
 8004356:	fbb3 f3f2 	udiv	r3, r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800435e:	e01d      	b.n	800439c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004360:	f7fd ff8a 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8004364:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	085a      	lsrs	r2, r3, #1
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	441a      	add	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	b29b      	uxth	r3, r3
 800437a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800437c:	e00e      	b.n	800439c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	b29b      	uxth	r3, r3
 8004392:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004394:	e002      	b.n	800439c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	76fb      	strb	r3, [r7, #27]
        break;
 800439a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b0f      	cmp	r3, #15
 80043a0:	d90a      	bls.n	80043b8 <UART_SetConfig+0x6c8>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a8:	d206      	bcs.n	80043b8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	e003      	b.n	80043bc <UART_SetConfig+0x6cc>
 80043b4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043c8:	7efb      	ldrb	r3, [r7, #27]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3728      	adds	r7, #40	; 0x28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080043d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01a      	beq.n	80044ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d2:	d10a      	bne.n	80044ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004526:	f7fc fe2d 	bl	8001184 <HAL_GetTick>
 800452a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b08      	cmp	r3, #8
 8004538:	d10e      	bne.n	8004558 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800453a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f82a 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e020      	b.n	800459a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b04      	cmp	r3, #4
 8004564:	d10e      	bne.n	8004584 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f814 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e00a      	b.n	800459a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b2:	e05d      	b.n	8004670 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d059      	beq.n	8004670 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fc fde2 	bl	8001184 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11b      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e042      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02b      	beq.n	8004670 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004626:	d123      	bne.n	8004670 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004630:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004640:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e00f      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	429a      	cmp	r2, r3
 800468c:	d092      	beq.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff faf0 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004710:	2b21      	cmp	r3, #33	; 0x21
 8004712:	d12b      	bne.n	800476c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d110      	bne.n	8004742 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004740:	e014      	b.n	800476c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b292      	uxth	r2, r2
 800474e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004784:	2b21      	cmp	r3, #33	; 0x21
 8004786:	d12f      	bne.n	80047e8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d110      	bne.n	80047b6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047b2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047b4:	e018      	b.n	80047e8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	881a      	ldrh	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	b292      	uxth	r2, r2
 80047ca:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	1c9a      	adds	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fa55 	bl	8003cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004834:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483a:	2b22      	cmp	r3, #34	; 0x22
 800483c:	d13a      	bne.n	80048b4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004844:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004846:	89bb      	ldrh	r3, [r7, #12]
 8004848:	b2d9      	uxtb	r1, r3
 800484a:	89fb      	ldrh	r3, [r7, #14]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	400a      	ands	r2, r1
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d123      	bne.n	80048c8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800488e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fb fed3 	bl	8000658 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048b2:	e009      	b.n	80048c8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	8b1b      	ldrh	r3, [r3, #24]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0208 	orr.w	r2, r2, #8
 80048c4:	b292      	uxth	r2, r2
 80048c6:	831a      	strh	r2, [r3, #24]
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e4:	2b22      	cmp	r3, #34	; 0x22
 80048e6:	d13a      	bne.n	800495e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048ee:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80048f6:	89ba      	ldrh	r2, [r7, #12]
 80048f8:	89fb      	ldrh	r3, [r7, #14]
 80048fa:	4013      	ands	r3, r2
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	1c9a      	adds	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d123      	bne.n	8004972 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004938:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fb fe7e 	bl	8000658 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800495c:	e009      	b.n	8004972 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	8b1b      	ldrh	r3, [r3, #24]
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0208 	orr.w	r2, r2, #8
 800496e:	b292      	uxth	r2, r2
 8004970:	831a      	strh	r2, [r3, #24]
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4e0d      	ldr	r6, [pc, #52]	; (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004996:	1ba4      	subs	r4, r4, r6
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2500      	movs	r5, #0
 800499c:	42a5      	cmp	r5, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4e0b      	ldr	r6, [pc, #44]	; (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	; (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 f820 	bl	80049e8 <_init>
 80049a8:	1ba4      	subs	r4, r4, r6
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2500      	movs	r5, #0
 80049ae:	42a5      	cmp	r5, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049b8:	4798      	blx	r3
 80049ba:	3501      	adds	r5, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c2:	4798      	blx	r3
 80049c4:	3501      	adds	r5, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004a80 	.word	0x08004a80
 80049cc:	08004a80 	.word	0x08004a80
 80049d0:	08004a80 	.word	0x08004a80
 80049d4:	08004a84 	.word	0x08004a84

080049d8 <memset>:
 80049d8:	4402      	add	r2, r0
 80049da:	4603      	mov	r3, r0
 80049dc:	4293      	cmp	r3, r2
 80049de:	d100      	bne.n	80049e2 <memset+0xa>
 80049e0:	4770      	bx	lr
 80049e2:	f803 1b01 	strb.w	r1, [r3], #1
 80049e6:	e7f9      	b.n	80049dc <memset+0x4>

080049e8 <_init>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr

080049f4 <_fini>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr
